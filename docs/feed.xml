<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>m.igrs.jp</title>
    <description>Dust In The Plain Text</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 16 Apr 2018 13:35:10 +0900</pubDate>
    <lastBuildDate>Mon, 16 Apr 2018 13:35:10 +0900</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>Amazon EC2 で複数ホスト一括処理するなら ec2-pssh がとっても便利</title>
        <description>&lt;p&gt;（&lt;a href=&quot;/blog/2013/03/14/ec2-ssh/&quot;&gt;前記事&lt;/a&gt;の続きです）&lt;/p&gt;

&lt;p&gt;複数のホストに対して同時にコマンドを実行するツールはいくつかあるのですが Amazon EC2 向けのものがなさそうだったので作ってみました。&lt;/p&gt;

&lt;h2 id=&quot;できること&quot;&gt;できること&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;とある名前やタグが付いたインスタンスに一括でコマンド発行したり&lt;/li&gt;
  &lt;li&gt;とある Auto Scaling group や ELB に属したインスタンスのログを同時に眺めたり&lt;/li&gt;
  &lt;li&gt;とあるグループのインスタンス内の特定ファイルを一度に収集したり&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いろいろ便利なことが簡単に実現できます。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;parallel-ssh&quot;&gt;Parallel SSH&lt;/h2&gt;

&lt;p&gt;まず前提として &lt;a href=&quot;https://code.google.com/p/parallel-ssh/&quot;&gt;PSSH: Parallel SSH Tools&lt;/a&gt; を利用するので詳しくは pssh について詳しいページを参照のこと。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.livedoor.jp/hakin/archives/51652847.html&quot;&gt;Parallel ssh (pssh)で複数ホストでコマンド同時実行&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pocketstudio.jp/log3/2013/06/04/pssh-pararell-ssh-command-line-tool/&quot;&gt;pssh(pararell-ssh)で複数サーバの同時操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mac 環境なら &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo easy_isntall pssh&lt;/code&gt; で入ります。&lt;/p&gt;

&lt;p&gt;思想としては &lt;a href=&quot;/blog/2013/03/14/ec2-ssh/&quot;&gt;ec2-ssh&lt;/a&gt; と同じく極力シンプルにするため pssh の単純なラッパーコマンドとして実装しており利用方法やパラメータ等は pssh 互換です。
一括処理するグループを指定するためオプションだけを加えてます。&lt;/p&gt;

&lt;h2 id=&quot;オプション&quot;&gt;オプション&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-S / --as&lt;/code&gt; : Auto Scaling グループ名を指定&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-N / --name&lt;/code&gt; : インスタンス名を指定(同じ名前のインスタンスが複数ある場合)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-T / --tag&lt;/code&gt; : タグを指定 (Key=Value)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-F / --filter&lt;/code&gt; : フィルタを直接指定 see. &lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ApiReference-cmd-DescribeInstances.html&quot;&gt;ec2-describe-instances&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-L / --elb&lt;/code&gt; : ロードバランサー名を指定&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;使い方&quot;&gt;使い方&lt;/h2&gt;

&lt;p&gt;ロードバランサー lb-web 配下に属するサーバ群のアクセスログを同時に眺める&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ec2-pssh -L lb-web -P tail -f /var/log/nginx/access.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Auto Scaling グループ名 as-api に属するサーバ群の負荷状況をリアルタイムで確認&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ec2-pssh -S as-api -P vmstat 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;api という名前が付いたサーバのディスク利用率を一度に確認&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ec2-pssh -N api -i df -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;等々&lt;/p&gt;

&lt;h2 id=&quot;他の-pssh-コマンド群&quot;&gt;他の PSSH コマンド群&lt;/h2&gt;

&lt;p&gt;Parallel SSH Tools には pssh 以外にもいくつか便利コマンドが用意されているのですが、それらのラッパーも用意しました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ec2-pscp (一括ファイル送信)&lt;/li&gt;
  &lt;li&gt;ec2-pslurp (一括ファイル収集)&lt;/li&gt;
  &lt;li&gt;ec2-prsync (一括ファイル同期)&lt;/li&gt;
  &lt;li&gt;ec2-pnuke (一括プロセス終了 pkill)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一括ファイル送信&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ec2-pssh -N api -i df -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一括ファイル収集&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ec2-pssh -N api -i df -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;その他の付属コマンド&quot;&gt;その他の付属コマンド&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ec2-ssh (&lt;a href=&quot;/blog/2013/03/14/ec2-ssh/&quot;&gt;前記事&lt;/a&gt;参照)&lt;/li&gt;
  &lt;li&gt;ec2-host (インスタンス名解決)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;hoge という名前の付いたインスタンスは誰？&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ec2-host hoge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Auto Scaling グループ名 as-api に属する全てのサーバ名を取得&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ec2-host -S as-api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ec2-host は他のコマンドとの組み合わせて使うと便利です。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat ~/.ssh/id_rsa.pub | ssh -i ~/ec2.pem ec2-user@`ec2-host hoge` 'cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 17 Feb 2014 10:00:00 +0900</pubDate>
        <link>http://localhost:4000//blog/2014/02/17/ec2-pssh/</link>
        <guid isPermaLink="true">http://localhost:4000//blog/2014/02/17/ec2-pssh/</guid>
        
        
        <category>aws</category>
        
        <category>ec2</category>
        
      </item>
    
      <item>
        <title>Amazon EC2 で SSH するなら ec2-ssh が便利</title>
        <description>&lt;p&gt;AWSを本格的に使い始めて約3ヶ月になる新参者です。
便利過ぎて今までの時間を返して欲しいくらいなのですが過ぎたものは仕方ないので前に進みましょう。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;http://f.cl.ly/items/0A1P0K2j1S2G2N033n3D/ec2-ssh.png&quot; width=&quot;464&quot; height=&quot;207&quot; alt=&quot;ec2-ssh&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ec2-への-ssh-接続&quot;&gt;EC2 への SSH 接続&lt;/h2&gt;
&lt;p&gt;Amazon EC2 上のインスタンスにSSH接続するベーシックな方法は&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; /path/to/pk.pem ec2-user@ec2-xxx-xxx-xxx-xxx.compute-1.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ですが、これでは何のサーバに接続しているのかさっぱり分からないのでこのまま運用している人はまずいないでしょう。
(AWS Management Console から毎回コピペでがんばっている人はいそう)&lt;/p&gt;

&lt;h3 id=&quot;sshconfig&quot;&gt;~/.ssh/config&lt;/h3&gt;

&lt;p&gt;おそらく多くの人は &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; の設定にそれぞれ工夫を凝らしているのかと思われますが、
インスタンス数が増えてくると &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; の更新も煩わしくなります。
また Auto Scaling 等のダイナミックな運用になるととても追いつきません。&lt;/p&gt;

&lt;h2 id=&quot;既存サポートツール&quot;&gt;既存サポートツール&lt;/h2&gt;
&lt;!-- more --&gt;

&lt;h3 id=&quot;ec2ssh&quot;&gt;ec2ssh&lt;/h3&gt;
&lt;p&gt;その煩わしさを解消するツールとして &lt;a href=&quot;https://github.com/mirakui/ec2ssh&quot;&gt;ec2ssh&lt;/a&gt; という
&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; の更新を半自動化してくれるものがあります。
(see. &lt;a href=&quot;http://blog.mirakui.com/entry/20101205/1291551625&quot;&gt;Amazon EC2インスタンスに簡単にSSHできるようになるツールec2sshを公開しました&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;ただこれもコマンド一発とはいえ更新作業が必要になり、私にはこれも煩わしく感じました。
更新を忘れると期待と異なるサーバにアクセスしてしまう可能性もあります。&lt;/p&gt;

&lt;h3 id=&quot;ec2-ssh&quot;&gt;ec2-ssh&lt;/h3&gt;
&lt;p&gt;そこで登場するのが &lt;a href=&quot;https://github.com/Instagram/ec2-ssh&quot;&gt;ec2-ssh&lt;/a&gt; です。(が、まだ本題ではありません！)&lt;/p&gt;

&lt;p&gt;これは &lt;a href=&quot;http://instagram.com&quot;&gt;Instagram&lt;/a&gt; エンジニアが作ったツールで
&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; の編集無しにダイナミックに解決するタイプになります。
(see. &lt;a href=&quot;http://instagram-engineering.tumblr.com/post/11399488246/simplifying-ec2-ssh-connections&quot;&gt;Simplifying EC2 SSH Connections&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;私の趣味的にはこちらの方がマッチしていたので2,3日使ってみたのですが、以下の点で不満がありました。&lt;/p&gt;

&lt;h4 id=&quot;不満点&quot;&gt;不満点&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;ssh のオプションと互換性がない&lt;/li&gt;
  &lt;li&gt;ユーザ名を省略した時に &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; の &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 設定が有効にならない&lt;/li&gt;
  &lt;li&gt;Python が必要&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;別に Python が嫌なわけではなくてシェルスクリプトで十分に書けるものなのにわざわざ
依存関係を増やしたくないというだけです。&lt;/p&gt;

&lt;h2 id=&quot;やっと本題-作ってみた&quot;&gt;(やっと本題) 作ってみた&lt;/h2&gt;
&lt;p&gt;というわけで、仕様・実装ともにもっとシンプルにした yet another ec2-ssh を作ってみました。&lt;/p&gt;

&lt;h3 id=&quot;特徴&quot;&gt;特徴&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; の更新不要&lt;/li&gt;
  &lt;li&gt;ssh の単なるラッパーなので ssh と全く同じように利用可能
    &lt;ul&gt;
      &lt;li&gt;ホスト名の部分を解決して置換しているだけ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pure シェルスクリプト No Requirements
    &lt;ul&gt;
      &lt;li&gt;ただしWindowsは考慮してません。Cygwin とかなら多分動く。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;同じ名前が付いたインスタンスへの接続にも対応&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;インストール&quot;&gt;インストール&lt;/h3&gt;

&lt;h4 id=&quot;ec2-api-tools&quot;&gt;ec2-api-tools&lt;/h4&gt;

&lt;p&gt;まず前提として &lt;a href=&quot;http://aws.amazon.com/developertools/351&quot;&gt;ec2-api-tools&lt;/a&gt; が動く
環境になっていることが求められますが AWS 使っている人であれば設定済みでしょう。&lt;/p&gt;

&lt;p&gt;利用するコマンドは &lt;code class=&quot;highlighter-rouge&quot;&gt;ec2-describe-instances&lt;/code&gt; のみです。&lt;/p&gt;

&lt;p&gt;Mac なら、&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install ec2-api-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;で OK。&lt;/p&gt;

&lt;p&gt;環境変数で以下を適切に設定すれば動くはずです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_ACCESS_KEY&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_SECRET_KEY&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EC2_HOME&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EC2_URL&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EC2_REGION&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ec2-ssh-1&quot;&gt;ec2-ssh&lt;/h4&gt;

&lt;p&gt;gist に置きました。&lt;a href=&quot;https://gist.github.com/migrs/5157665&quot;&gt;ec2-ssh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まだパッケージングしてないけどシェルスクリプト1つなので以下のような手順で。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://gist.github.com/migrs/5157665/raw/736e5940279ba92040400d21071b0cf6a392ce5d/ec2-ssh -P /path/to/bin/
chmod +x /path/to/bin/ec2-ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;利用方法&quot;&gt;利用方法&lt;/h3&gt;

&lt;p&gt;web1 という名前がついたサーバにSSH接続&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ec2-ssh web1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ユーザ名を指定&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ec2-ssh jonny@web1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同名インスタンスへの接続。上から3番目(作成順)。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ec2-ssh web#3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ポートフォワーディング&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ec2-ssh -L 8080:127.0.0.1:80 web1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コマンド直接実行&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ec2-ssh web1 ls -la
ec2-ssh web1 tail -f /var/log/nginx/access.log
ec2-ssh web1 vmstat 1
ec2-ssh web1 -t top
ec2-ssh web1 -t sudo service nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;いい感じですね。&lt;/p&gt;

&lt;h2 id=&quot;続き&quot;&gt;続き&lt;/h2&gt;
&lt;p&gt;新参なので知らないだけなのかもしれません。
もっと良い何かがあったら是非教えてください。&lt;/p&gt;

&lt;p&gt;この記事には続きがあります。もっと便利な何かを紹介します。&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Mar 2013 09:00:00 +0900</pubDate>
        <link>http://localhost:4000//blog/2013/03/14/ec2-ssh/</link>
        <guid isPermaLink="true">http://localhost:4000//blog/2013/03/14/ec2-ssh/</guid>
        
        
        <category>aws</category>
        
        <category>ec2</category>
        
      </item>
    
      <item>
        <title>LL Decade 参加者向け - 銀座ブロッサム周辺ランチ情報</title>
        <description>&lt;p&gt;来たる8月4日に &lt;a href=&quot;http://ll.jus.or.jp/2012/&quot;&gt;LL Decade&lt;/a&gt; が&lt;a href=&quot;http://www.ginza-blossom.jp/&quot;&gt;銀座ブロッサム&lt;/a&gt;にて開催されます。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;http://f.cl.ly/items/0H2R1l3o3D0A071p1o2i/blossom-map.png&quot; width=&quot;494&quot; height=&quot;165&quot; alt=&quot;Ginza Blossom Map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ただ場所的に少し問題がありまして近隣で住んだり働いたりしたことがある人なら分かると思いますがもともと飲食店が少ないエリアな上に土日営業してない店が多いのです。
少し歩いて飲食店を探しに行くことになるはずですが、行く方向間違えれば確実にランチ難民になるでしょう。&lt;/p&gt;

&lt;p&gt;ということで&lt;a href=&quot;https://maps.google.co.jp/maps/ms?msa=0&amp;amp;msid=201424146758768741852.0004c53e96f9394c5f5f1&amp;amp;brcurrent=3,0x60188bdf2c891475:0xa0a942a1368b185,0&amp;amp;ie=UTF8&amp;amp;t=m&amp;amp;ll=35.671469,139.770792&amp;amp;spn=0.004184,0.006866&amp;amp;z=17&amp;amp;source=embed&quot; style=&quot;color:#0000FF;text-align:left&quot;&gt;銀座ブロッサム周辺で土曜日にランチ営業している飲食店&lt;/a&gt;マップを作ってみました。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;div style=&quot;margin-bottom:1em;&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;480&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; src=&quot;https://maps.google.co.jp/maps/ms?msa=0&amp;amp;msid=201424146758768741852.0004c53e96f9394c5f5f1&amp;amp;brcurrent=3,0x60188bdf2c891475:0xa0a942a1368b185,0&amp;amp;ie=UTF8&amp;amp;t=m&amp;amp;ll=35.671469,139.770792&amp;amp;spn=0.004184,0.006866&amp;amp;z=17&amp;amp;output=embed&quot;&gt;&lt;/iframe&gt;
&lt;div style=&quot;font-size:small;&quot;&gt;
&lt;span&gt;&lt;img style=&quot;border:none;&quot; width=&quot;16&quot; height=&quot;16&quot; src=&quot;http://maps.google.co.jp/mapfiles/ms/icons/red.png&quot; /&gt;中華・韓国&lt;/span&gt;
&lt;span&gt;&lt;img style=&quot;border:none;&quot; width=&quot;16&quot; height=&quot;16&quot; src=&quot;http://maps.google.co.jp/mapfiles/ms/icons/green.png&quot; /&gt;定食・和食・寿司&lt;/span&gt;
&lt;span&gt;&lt;img style=&quot;border:none;&quot; width=&quot;16&quot; height=&quot;16&quot; src=&quot;http://maps.google.co.jp/mapfiles/ms/icons/pink.png&quot; /&gt;洋食&lt;/span&gt;
&lt;span&gt;&lt;img style=&quot;border:none;&quot; width=&quot;16&quot; height=&quot;16&quot; src=&quot;http://maps.google.co.jp/mapfiles/ms/icons/lightblue.png&quot; /&gt;ラーメン&lt;/span&gt;
&lt;span&gt;&lt;img style=&quot;border:none;&quot; width=&quot;16&quot; height=&quot;16&quot; src=&quot;http://maps.google.co.jp/mapfiles/ms/icons/yellow.png&quot; /&gt;カレー&lt;/span&gt;
&lt;span&gt;&lt;img style=&quot;border:none;&quot; width=&quot;16&quot; height=&quot;16&quot; src=&quot;http://maps.google.co.jp/mapfiles/ms/icons/blue.png&quot; /&gt;カフェ&lt;/span&gt;
&lt;span&gt;&lt;img style=&quot;border:none;&quot; width=&quot;16&quot; height=&quot;16&quot; src=&quot;http://maps.google.co.jp/mapfiles/ms/icons/purple.png&quot; /&gt;ファストフード&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;こうやって見ると多く感じますが、銀座ブロッサム中心半径約150mは空洞化してるのが分かると思います。
しかも近めはお高めの店が多いので注意が必要です。&lt;/p&gt;

&lt;p&gt;おすすめエリアは&lt;a href=&quot;http://goo.gl/maps/7AmO&quot;&gt;歌舞伎座周辺&lt;/a&gt;と&lt;a href=&quot;http://goo.gl/maps/VLey&quot;&gt;ウィンズ銀座周辺&lt;/a&gt;です。
ちょっと余裕があれば&lt;a href=&quot;http://goo.gl/maps/AngE&quot;&gt;築地場外市場&lt;/a&gt;(徒歩約10分)まで足を伸ばしても良いでしょう。土曜の場外は活気があって面白いと思います(その分混雑しているので注意)。
もちろん中央通り付近まで行けば迷う程お店あります。&lt;/p&gt;

&lt;p&gt;場所柄高めなレストランも多いのですが一応そこまで高くない店をピックアップしているつもり。
とある土曜日のお昼時に撮影した外観写真と食べログへのリンクを貼っているので参考まで。
黒いドットが付いてる店は個人的にお勧めな店に付けようと思ったのですが適当なのであまり気にしないでください。&lt;/p&gt;

&lt;p&gt;腹が減っては何とやら、無事美味しいランチに辿りつけることを心よりお祈りしております。&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Jul 2012 08:00:00 +0900</pubDate>
        <link>http://localhost:4000//blog/2012/07/24/lldecade-lunch-spots/</link>
        <guid isPermaLink="true">http://localhost:4000//blog/2012/07/24/lldecade-lunch-spots/</guid>
        
        
        <category>lunch</category>
        
        <category>ginza</category>
        
      </item>
    
      <item>
        <title>フジロックより安い！Jisan Valley Rock Festival に行こう 2012</title>
        <description>&lt;h4 id=&quot;更新情報&quot;&gt;更新情報&lt;/h4&gt;

&lt;h5 id=&quot;720-更新&quot;&gt;7/20 更新&lt;/h5&gt;

&lt;p&gt;前回情報いただいた現地在住の&lt;a href=&quot;http://orshig.blog101.fc2.com/&quot;&gt;ゆるゆるはんぐく&lt;/a&gt;さんのページにてさらに詳しい情報が紹介されていますので掲載させていただきます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://orshig.blog101.fc2.com/blog-entry-89.html&quot;&gt;Jisan valley rock festivalの手引き1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://orshig.blog101.fc2.com/blog-entry-90.html&quot;&gt;Jisan valley rock festivalの手引き2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;710-更新&quot;&gt;7/10 更新&lt;/h5&gt;

&lt;p&gt;専用シャトルバスがあるようなのでアクセス方法について更新しました。
キャンプ道具も一式レンタルできるそうです。
(&lt;a href=&quot;http://twitter.com/yuruyuruhanguk&quot;&gt;韓国にお住まいの方&lt;/a&gt;から情報いただきました。ありがとうございます！)&lt;/p&gt;

&lt;h2 id=&quot;fuji-rock-festival-2012&quot;&gt;FUJI ROCK FESTIVAL 2012&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;http://f.cl.ly/items/3N050N3O0U3a082B2l1V/FRF12_logo.jpg&quot; width=&quot;350&quot; height=&quot;235&quot; alt=&quot;Fuji Rock Festival 2012&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今年は&lt;a href=&quot;http://www.fujirockfestival.com/news/?id=1275&quot;&gt;異例の開催発表&lt;/a&gt;で話題になった &lt;a href=&quot;http://www.fujirockfestival.com/&quot;&gt;FUJI ROCK&lt;/a&gt; ですがいよいよ今月末まで迫ってきました。&lt;/p&gt;

&lt;p&gt;なんと言っても今年の目玉は&lt;a href=&quot;http://oops-music.com/news.php?nid=69879/&quot;&gt;奇跡の再結成&lt;/a&gt;を果した&lt;a href=&quot;http://www.thestoneroses.org/&quot;&gt;THE STONE ROSES&lt;/a&gt;と実は&lt;a href=&quot;http://natalie.mu/music/news/62579&quot;&gt;FUJI ROCK 初出演&lt;/a&gt;となる&lt;a href=&quot;http://radiohead.com/&quot;&gt;RADIOHEAD&lt;/a&gt;でしょう。
他にもたくさん魅力的なアーティストが目白押しなので非常に楽しみなのですが、毎度ながらかなりお高いですよね。。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.fujirockfestival.com/ticket/&quot;&gt;FUJI ROCK チケット情報&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;1日券: 17,800円 (先行販売 16,800円)&lt;/li&gt;
      &lt;li&gt;3日券: 42,800円 (先行販売 39,800円)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;毎年では無いものの結構参戦しているのですがここ最近は一日に焦点絞っての参加になることが多いです。(お値段以上の価値があるイベントだとは思いますが)&lt;/p&gt;

&lt;h2 id=&quot;jisan-valley-rock-festival-2012&quot;&gt;JISAN VALLEY ROCK FESTIVAL 2012&lt;/h2&gt;

&lt;p&gt;ここで本題。
海を渡ったお隣韓国でも FUJI ROCK とまったく同じ日程(7/27-29)でフェスが開催されます。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;http://f.cl.ly/items/3b0q2h3k3E0M0d3U1142/jisan-valley-rock-festival-2012.jpg&quot; width=&quot;600&quot; height=&quot;530&quot; alt=&quot;Jisan Valley Rock Festival 2012&quot; /&gt;
&lt;a href=&quot;http://www.valleyrockfestival.com/&quot;&gt;Jisan Valley Rock Festival 2012&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このフェスは FUJI ROCK 主催の&lt;a href=&quot;http://smash-jpn.com/&quot;&gt;スマッシュ&lt;/a&gt;と連携しており、FUJI ROCK に出演するアーティストの多くがこちらにも出演するのです。
画像にもデカデカと書いてますが上記2大アーディストも出演が決まっており、RADIOHEAD に関しては韓国初上陸とのこと。&lt;/p&gt;

&lt;p&gt;そしてそのチケット代が円高も相まって非常にお値打ち価格なのです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mnetjapan.com/valleyrockfestival/ticket.m&quot;&gt;JVRF チケット情報&lt;/a&gt; (100ウォン = 7円換算)
    &lt;ul&gt;
      &lt;li&gt;1日券: 140,000ウォン (約 9,800円)&lt;/li&gt;
      &lt;li&gt;3日券: 225,000ウォン (約 15,750円)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3日券に関しては半額以下で&lt;strong&gt;6割以上&lt;/strong&gt;も安いことになります。&lt;/p&gt;

&lt;p&gt;その差額があれば格安航空券等を利用することで交通費も賄えます。&lt;br /&gt;
&lt;a href=&quot;http://www.ne.jp/asahi/category/info/airticket/korea.html&quot;&gt;韓国(ソウル)の格安航空券/旅行相場&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;苗場に向うにしてもそれなりの交通費(上越新幹線自由席 東京-越後湯沢 往復 11,960円)がかかるので、これは検討してみる価値がありそうです。&lt;/p&gt;

&lt;p&gt;フェスのついでに韓国旅行も楽しんじゃおう！というノリならさらにお得に思えてくるわけで、
もちろん規模も出演アーティストも FUJI ROCK の方が圧倒的に上なのですが、最低限この2バンドが拝めれば良いと思っている私のような人にとっては非常に魅力的です。&lt;/p&gt;

&lt;p&gt;というわけで、本格的に行ってみようと先月末くらい思い立ちいろいろ調べて始めてみました。(遅いって・・・)&lt;/p&gt;

&lt;h2 id=&quot;現地情報&quot;&gt;現地情報&lt;/h2&gt;

&lt;h3 id=&quot;開催場所&quot;&gt;開催場所&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://japanese.gg.go.kr/global/main.do?lang=JPN&quot;&gt;京畿道&lt;/a&gt;(キョンギド)&lt;a href=&quot;http://www.icheon.go.kr/site/japan/main.do&quot;&gt;利川市&lt;/a&gt;(イチョンシ)にあるスキー場 &lt;a href=&quot;http://www.jisanresort.co.kr/&quot;&gt;Jisan Forest Resort&lt;/a&gt; で開催されます。
FUJI ROCK が&lt;a href=&quot;http://www.princehotels.co.jp/ski/naeba/&quot;&gt;苗場スキー場&lt;/a&gt;で開催されるのと同じ感覚ですが、都心(ソウル市内)からの距離で比べるとより近いようです。
(&lt;a href=&quot;http://www.mnetjapan.com/valleyrockfestival/location.m&quot;&gt;会場へのアクセス情報&lt;/a&gt;)&lt;/p&gt;

&lt;h4 id=&quot;アクセス方法&quot;&gt;アクセス方法&lt;/h4&gt;

&lt;p&gt;&lt;del&gt;以前までは専用シャトルバスがあったようなのですが今年は無くなってしまったようです。&lt;/del&gt;
&lt;del&gt;交通手段としては、公共交通機関(バス)か車(レンタカー)のどちらかになります。&lt;/del&gt;
&lt;del&gt;(※現状どちらにするかは決めかねてます)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;専用シャトルバスについて韓国語の公式サイトの方に告知されていました。(英語・日本語のサイトは更新されてません。)&lt;br /&gt;
なので現地に向かうにはシャトルバスが一番良いでしょう。&lt;/p&gt;

&lt;h5 id=&quot;専用シャトルバス&quot;&gt;専用シャトルバス&lt;/h5&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://valleyrockfestival.mnet.com/2012/news.asp?seq=79520&quot;&gt;7/5 [お知らせ]シャトルのご案内と予約申込&lt;/a&gt;([Google 翻訳](http://translate.google.com/translate?u=http%3A%2F%2Fvalleyrockfestival.mnet.com%2F2012%2Fnews.asp%3Fseq%3D79520&amp;amp;hl=ja&amp;amp;langpair=auto&lt;/td&gt;
      &lt;td&gt;ja&amp;amp;tbb=1&amp;amp;ie=UTF-8))&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;http://valleyrockfestival.mnet.com/2012/file_down5.asp&quot;&gt;予約フォームをダウンロード&lt;/a&gt;し入力したものをメールで添付して送ることで予約申込となるようです。
メール予約から3日以内に指定口座に料金を振り込む必要があります。料金は往復 22,000ウォン(約1,540円)です。 (振込方法については、あとで書く)&lt;/p&gt;

&lt;h5 id=&quot;公共交通機関バス&quot;&gt;公共交通機関(バス)&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.seoulnavi.com/miru/193/&quot;&gt;東ソウルターミナル&lt;/a&gt;から 利川(이천 イチョン)行きバス に乗って &lt;a href=&quot;http://www.seoulnavi.com/miru/1429/&quot;&gt;利川市外バスターミナル&lt;/a&gt; に向います。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;頻繁(約15分毎?)に運行されている(未確認情報)&lt;/li&gt;
      &lt;li&gt;所要時間は約1時間&lt;/li&gt;
      &lt;li&gt;運賃は 3,800ウォン(約266円) くらい？(未確認情報)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.seoulnavi.com/miru/1429/&quot;&gt;利川市外バスターミナル&lt;/a&gt;から 12蕃バスに乗って ジサンマートで下車&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;比較的頻繁(約30分毎?)に運行されている(未確認情報)&lt;/li&gt;
      &lt;li&gt;所要時間は約40分&lt;/li&gt;
      &lt;li&gt;運賃は 1,200ウォン(約84円) くらい？(未確認情報)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;運賃に関しては非常に安いので気にする必要はなさそうです。
ただし利川市まで入ってしまうと日本語はもちろん英語の案内も無く現地の方もほぼ話せないと思った方が良いらしい。
目的地をハングルでメモっておいた方が良いでしょう。&lt;/p&gt;

&lt;p&gt;また、韓国はタクシー料金が安く、利川市外バスターミナルから会場まではタクシーで向うのが良いかもしれないとのアドバイスも貰いました。(約3,000-5,000ウォン 約200-300円)&lt;/p&gt;

&lt;p&gt;ただ行きは良いのですが帰りが問題です。
終バスの時刻は21時台のようなので、その頃は一番の目的のアーティストが絶賛演奏中である可能性が高く帰れそうにありません。
(タイムテーブルまだでてない。でるのか？)&lt;/p&gt;

&lt;p&gt;そうなると現地で夜を明かすことになるのですが現地宿泊情報は後述します。&lt;/p&gt;

&lt;h5 id=&quot;車レンタカー&quot;&gt;車(レンタカー)&lt;/h5&gt;

&lt;p&gt;国際運転免許証取得して現地で &lt;a href=&quot;http://www.hertz.com/&quot;&gt;Hertz&lt;/a&gt; あたりで借りてあとは iPhone の力でなんとか会場まで辿り着けるでしょう。(ちゃんと調べてないので適当)&lt;br /&gt;
車なら帰りも心配ありません。&lt;br /&gt;
ただ韓国の運転マナーは非常に悪いらしくどのガイドブックでもお勧めしてないそうです。&lt;/p&gt;

&lt;h2 id=&quot;必要な手配&quot;&gt;必要な手配&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;JVRF 2012 チケット購入&lt;/li&gt;
  &lt;li&gt;航空券の手配&lt;/li&gt;
  &lt;li&gt;宿の確保&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jvrf-2012-チケット購入&quot;&gt;JVRF 2012 チケット購入&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mnetjapan.com/valleyrockfestival/ticket.m&quot;&gt;公式のチケット案内&lt;/a&gt; から予約販売先へのリンクがあるので、
好きなところから予約するのが良いですが、英語なのは以下の二つだけのようです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ticket.yes24.com/Home/PerfFN/PerfDetailInfoFN.aspx?IdPerf=11904&quot;&gt;YES24.COM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ticket.interpark.com/Global/Play/Goods/GoodsInfo.asp?GoodsCode=12005724&quot;&gt;INTERPARK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意点として YES24.COM は Windows でないと決済できない仕組みを使ってます。INTERPARK の方はまだ試してません。&lt;/p&gt;

&lt;p&gt;チケットは会場にてIDと引き換えに渡されるようです。&lt;/p&gt;

&lt;h3 id=&quot;航空券の手配&quot;&gt;航空券の手配&lt;/h3&gt;

&lt;p&gt;適当に手配しましょう。
羽田発で便確定の一番安いチケットだと一人往復28,000円(燃油サーチャージ・空港使用料等込み)くらいです。&lt;/p&gt;

&lt;h3 id=&quot;宿の確保&quot;&gt;宿の確保&lt;/h3&gt;

&lt;p&gt;こちらも適当に。半分観光目的なので&lt;del&gt;便利な&lt;a href=&quot;http://www.seoulnavi.com/area/detail.php?area_id=3&quot;&gt;明洞&lt;/a&gt;周辺&lt;/del&gt;(明洞周辺はちょっとお高めだったので&lt;a href=&quot;http://www.seoulnavi.com/matome/190078&quot;&gt;麻浦エリア&lt;/a&gt;にしました)に宿泊予定です。&lt;br /&gt;
パックツアーを利用し航空券と合わせて手配するのも良いでしょう。&lt;/p&gt;

&lt;h4 id=&quot;会場周辺宿泊情報&quot;&gt;会場周辺宿泊情報&lt;/h4&gt;

&lt;p&gt;もし会場から帰れなくなったらですが、会場周辺で何とかしなければいけません。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;おそらく朝までやってるので、徹夜でフェスに参加する&lt;/li&gt;
  &lt;li&gt;キャンプする
    &lt;ul&gt;
      &lt;li&gt;キャンピングチケット付を購入することでキャンプができます&lt;/li&gt;
      &lt;li&gt;&lt;del&gt;ただキャンプ設備を持って行けないので非現実的かと(韓国の知り合いと一緒にならアリ)&lt;/del&gt;&lt;/li&gt;
      &lt;li&gt;キャンプ道具一式のレンタルとオプションでテントの設営までできるそうです&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jisanresort.co.kr/jpn/condo01_01.html&quot;&gt;JISAN FOREST RESORT&lt;/a&gt; で宿泊
    &lt;ul&gt;
      &lt;li&gt;問合せたがキャンセル待ちとのこと&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pineresort.com/yangji_eng/index.html&quot;&gt;YANGJI PINE RESORT&lt;/a&gt; で宿泊
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://ticket.yes24.com/Home/PerfFN/PerfDetailInfoFN.aspx?IdPerf=11904&quot;&gt;公式に宿泊案内あり&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;送迎バス付&lt;/li&gt;
      &lt;li&gt;予約状況は未確認&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サウナ(ジンジルバン)に宿泊 (&lt;a href=&quot;http://naturalresort.co.kr/&quot;&gt;Anseong Natural Resort&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://ticket.yes24.com/Home/PerfFN/PerfDetailInfoFN.aspx?IdPerf=11904&quot;&gt;公式に宿泊案内あり&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;送迎バス付で一泊 20,000ウォン(約1,400円)&lt;/li&gt;
      &lt;li&gt;最終日は 15,000ウォン(約1,050円)(Sauna -&amp;gt; Fes Site の移動が無いので安い)&lt;/li&gt;
      &lt;li&gt;深夜 1:00 に会場まで迎えにきてくれる。(朝は 9:00 出発)&lt;/li&gt;
      &lt;li&gt;まだ予約可能だが、この予約が大変(後述)。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;サウナジンジルバンの予約&quot;&gt;サウナ(ジンジルバン)の予約&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;http://naturalresort.co.kr/&quot;&gt;Anseong Natural Resort&lt;/a&gt; のサイトを見てもらえれば分かると思いますが、
日本語はもちろん英語による案内もなく途方に暮れてしまいます。&lt;/p&gt;

&lt;p&gt;そこで、&lt;a href=&quot;http://japanese.gg.go.kr/global/contents.do?lang=JPN&amp;amp;pageCode=1211&quot;&gt;京畿道のコールセンター&lt;/a&gt;が日本語での対応可能らしいので JVRF の宿泊情報についてダメモトで問合せてみました。
すると非常に親切に対応してくれて、その担当者を経由して三者通話的に会話することでサウナの予約をすることができました。&lt;/p&gt;

&lt;p&gt;あとは銀行の振込を持って予約完了というところまで来たけど、今まで韓国の銀行口座に振り込んだことなど無い。。
幸い振込先の&lt;a href=&quot;http://www.hanabank.com/&quot;&gt;ハナ銀行&lt;/a&gt;の支店が丸の内にあったので問合せることができました。
振込方法については次で。&lt;/p&gt;

&lt;h2 id=&quot;韓国への送金方法&quot;&gt;韓国への送金方法&lt;/h2&gt;

&lt;p&gt;専用シャトルバスやジンジルバンの予約申し込みに必要な銀行口座への振込ですが、どちらも同じ口座情報でした。&lt;/p&gt;

&lt;p&gt;韓国への送金方法は以下のサイトが参考になります。&lt;br /&gt;
&lt;a href=&quot;http://www.konest.com/contents/korean_life_detail.html?id=2429&quot;&gt;日本から韓国への送金&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いくつか方法がありますが、私は丸の内にあるハナ銀行東京支店で手続きをしました。&lt;/p&gt;

&lt;p&gt;9時-15時 で営業しているのですが、ウォン建ての振り込みはレートが確定する11時以降になります。
私は11時まで待てなかったので円建てで送金しました。レートが分からないので念の為少し多めに。&lt;/p&gt;

&lt;p&gt;必要なものは、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;身分証明証&lt;/li&gt;
  &lt;li&gt;印鑑&lt;/li&gt;
  &lt;li&gt;振込手数料 1,500円 + 10,000ウォン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;振込先(Accounting holder) がハングルでかかれてますが、アルファベットで書く必要があります。
アルファベット表記は “SUNGJIN CNT” になります。&lt;/p&gt;

&lt;h2 id=&quot;日本のアーティスト情報&quot;&gt;日本のアーティスト情報&lt;/h2&gt;

&lt;p&gt;日本のアーティストも多数参加されます。同じ日本人として応援しましょう。&lt;/p&gt;

&lt;p&gt;(詳細はあとで書く)&lt;/p&gt;

&lt;h2 id=&quot;その他の手配&quot;&gt;その他の手配&lt;/h2&gt;
&lt;h3 id=&quot;モバイル環境&quot;&gt;モバイル環境&lt;/h3&gt;
&lt;h4 id=&quot;インターネット環境&quot;&gt;インターネット環境&lt;/h4&gt;
&lt;p&gt;iPhone がなれば海外旅行できないくらい非常に便利で依存してしまっているわけですが、ネットに繋がってなければほとんど意味がありません。
&lt;a href=&quot;http://mb.softbank.jp/mb/iphone/service/international/roaming/packet/&quot;&gt;海外パケットし放題&lt;/a&gt;のお陰で一日2,980円さえ払えばそれ以上料金気にすることなく利用できるようにはなったのですが、
数日となるとかなり高くついてしまいます。&lt;/p&gt;

&lt;p&gt;そこでオススメなのが、海外用モバイルデータ通信です。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;http://f.cl.ly/items/222H3h1G1T1d0f272A0g/mifi.jpg&quot; width=&quot;199&quot; height=&quot;149&quot; alt=&quot;MiFi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;いろいろ業者はあるようですが、私は&lt;a href=&quot;http://www.globaldata.jp/&quot;&gt;グローバルデータ&lt;/a&gt;を良く使ってます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.globaldata.jp/plans/&quot;&gt;韓国なら一日680円&lt;/a&gt;で海外パケットし放題と比べてもとってもお得です。
複数名で共有するならなおさらで、さらにPC等でも利用できるので海外旅行ではマストなアイテムです。&lt;/p&gt;

&lt;h4 id=&quot;skype-out-の活用&quot;&gt;Skype Out の活用&lt;/h4&gt;

&lt;p&gt;国際電話も非常にお高いイメージですが &lt;a href=&quot;http://www.skype.com/&quot;&gt;Skype&lt;/a&gt; を活用することでグッと節約(&lt;a href=&quot;http://www.skype.com/intl/ja/prices/payg-rates?currency=JPY&quot;&gt;1分約3円&lt;/a&gt;)できます。&lt;/p&gt;

&lt;h4 id=&quot;モバイルバッテリー&quot;&gt;モバイルバッテリー&lt;/h4&gt;

&lt;p&gt;iPhone を8回も充電できるらしい ルックイーストの大容量モバイルバッテリー&lt;a href=&quot;http://www.lookeast.co.jp/products/power_pond.html&quot;&gt;POWER-POND&lt;/a&gt; を&lt;a href=&quot;http://www.amazon.co.jp/gp/product/B0071SYNAM?ie=UTF8&amp;amp;camp=1207&amp;amp;creative=8411&amp;amp;creativeASIN=B0071SYNAM&amp;amp;linkCode=shr&amp;amp;tag=migrs-22&amp;amp;redirect=true&quot;&gt;購入&lt;/a&gt;しました。
&lt;img class=&quot;center&quot; src=&quot;http://f.cl.ly/items/0h2w1F2J2C3Y0U401k1P/power-pond.jpg&quot; width=&quot;200&quot; height=&quot;200&quot; alt=&quot;POWER POND&quot; /&gt;
買ったばかりなので、実力の程は不明。実力が本当ならサバイバル環境でも安心ですね！&lt;/p&gt;

&lt;h2 id=&quot;情報交換しましょう&quot;&gt;情報交換しましょう！&lt;/h2&gt;

&lt;p&gt;私もこれから諸々の手配を始めるところなので、まだまだ間に合うはずです。&lt;/p&gt;

&lt;p&gt;ただ未確認情報も多いので書いてること鵜呑みにせず御自身の責任で行動してください。&lt;/p&gt;

&lt;p&gt;まだまだ不明な点もたくさんありますが、情報お持ちの方や私も行ってみたいという方はお気軽にご連絡ください！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://facebook.com/migrs&quot;&gt;http://facebook.com/migrs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://twitter.com/migrs&quot;&gt;http://twitter.com/migrs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と長々書きましたが本当に行けるのかしら・・・&lt;/p&gt;

&lt;p&gt;※このページは開催までの間、次第随時更新予定です。&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Jul 2012 05:45:00 +0900</pubDate>
        <link>http://localhost:4000//blog/2012/07/07/jisan-valley-rock-festival-2012/</link>
        <guid isPermaLink="true">http://localhost:4000//blog/2012/07/07/jisan-valley-rock-festival-2012/</guid>
        
        
        <category>festival</category>
        
        <category>korea</category>
        
        <category>oversea</category>
        
      </item>
    
      <item>
        <title>Rubyist が今すぐ Elixir を使ってみるべき理由</title>
        <description>&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;http://f.cl.ly/items/3f2z0j113p1W2J3P3E0t/elixir-logo.png&quot; width=&quot;227&quot; height=&quot;95&quot; alt=&quot;elixir&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Elixir の読み方は多分「エリクサー」。RPGゲームのアイテムにありそうな名前だ。
個人的には「エリクシール」と読みたいところだが多分「エリクサー」で良いだろう。
Elixir は最近になって開発が活発化しており、公式サイトも最近立ち上げられたようだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://elixir-lang.org/&quot;&gt;http://elixir-lang.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;つい先週のことだが Github でも公式にサポートされている。&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;Elixir is officially supported on Github! Including file identification and syntax highlight: &lt;a href=&quot;https://t.co/YaKXApRH&quot; title=&quot;https://github.com/languages/Elixir&quot;&gt;github.com/languages/Elix…&lt;/a&gt;&lt;/p&gt;&amp;mdash; Elixir Lang (@elixirlang) &lt;a href=&quot;https://twitter.com/elixirlang/status/176735692938936321&quot; data-datetime=&quot;2012-03-05T18:27:27+00:00&quot;&gt;March 5, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;ここにきて盛り上がってきた感があるので、作者である &lt;a href=&quot;http://twitter.com/josevalim&quot;&gt;José Valim&lt;/a&gt; が約1年前に書いた &lt;a href=&quot;http://blog.plataformatec.com.br/2011/03/why-rubyists-should-try-elixir/&quot;&gt;Why Rubyists should try Elixir&lt;/a&gt; という記事を訳してみた。&lt;/p&gt;

&lt;p&gt;英語・日本語問わず語学苦手なので読み難い代物になってしまっているが間違いがあったら指摘して欲しい。&lt;/p&gt;

&lt;h4 id=&quot;追記2012-03-13&quot;&gt;追記(2012-03-13)：&lt;/h4&gt;
&lt;p&gt;昨日 Elixir 勉強会(Shinjuku.ex #1)で初めて &lt;a href=&quot;http://elixir-lang.org/getting_started/1.html&quot;&gt;Getting Started Guide&lt;/a&gt; を読んだのだが、今の Elixir は訳した記事が書かれた当時とはかなりシンタックスが変更されているようだ。 
なので記事中のコードを最新(0.4.0.dev)に合わせて書き直した。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;変更されていた点を列挙すると、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コメントアウトは &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; でなく &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;アトムは ` (シングルクォート)ではなく : (セミコロン)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;defmodule&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;defmodule&lt;/code&gt; には &lt;code class=&quot;highlighter-rouge&quot;&gt;do&lt;/code&gt; が必要&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;else:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/migrs/m.igrs.jp/commit/0747d7c8cf7cbf867d1654e42f6c6a1bd296308&quot;&gt;Diff はこちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;少し突っ込んでみて分かったこととして Erlang と Ruby だけではなく Clojure っぽさを強く感じる言語であるということ。&lt;/p&gt;

&lt;p&gt;勉強会については &lt;a href=&quot;http://twitter.com/mizchi&quot;&gt;@mizchi&lt;/a&gt; 氏のレポートがあるよ&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/mizchi/20120312/1331566107&quot;&gt;Elixir勉強会いってきました ~~ ErlangとRubyの中間、Elixir&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;rubyist-が今すぐ-elixir-を使ってみるべき理由-why-rubyists-should-try-elixir&quot;&gt;Rubyist が今すぐ Elixir を使ってみるべき理由 (Why Rubyists should try Elixir)&lt;/h2&gt;

&lt;p&gt;今月(※2011年3月25日現在)の初めに、私は &lt;a href=&quot;http://github.com/elixir-lang/elixir&quot;&gt;Elixir&lt;/a&gt; についての&lt;a href=&quot;http://blog.plataformatec.com.br/2011/03/screencast-elixir-simple-object-orientation-and-charming-syntax-on-top-of-erlang/&quot;&gt;スクリーンキャストを公開&lt;/a&gt;している。
 それを見てない人向けに説明すると、Elixir は &lt;strong&gt;Erlangの上にシンプルなオブジェクト指向と魅力的な構文&lt;/strong&gt;を提供することを目指している。&lt;/p&gt;

&lt;p&gt;私の強いRuby背景に基づいて、私は何度か質問された結果、なぜ Rubyists は Elixir を使ってみるべきかについてのブログ記事を書くことにした。&lt;/p&gt;

&lt;p&gt;Elixir が持つ Ruby から来た &lt;em&gt;method missing&lt;/em&gt; や &lt;em&gt;module eval&lt;/em&gt; のような多くの構文やいくつかの機能によって同じようにメタプログラミングをすることができる。&lt;/p&gt;

&lt;p&gt;しかしながら Elixir は他の何よりも Erlang に間違いなく近い。
単一代入変数、不変性、簡単なプロセス間通信、リスト、タプル、バイナリ、そしてOTPの振舞は、すべて Elixir で利用できる。
したがって Elixir を使うことを通じて多くを学ぶことができるだろう。&lt;/p&gt;

&lt;p&gt;多くを学ぶ中で私が楽しく感じたのは次のとおりだ：&lt;/p&gt;

&lt;h3 id=&quot;パターンマッチング-pattern-matching&quot;&gt;パターンマッチング (Pattern matching)&lt;/h3&gt;

&lt;p&gt;私にとってパターンマッチングは関数型プログラミングの中で最も楽しい機能の一つだ。
これらによって簡単にデータ構造から情報を抽出することができるようになる。&lt;/p&gt;

&lt;p&gt;例えば、Elixir では次のように記述する：&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ruby の代入演算子を使用して全く同じように書くことができるが、パターンマッチングの利点はメソッドのシグネチャの中で利用できることで、もしメソッドのシグネチャがある特定のパターンに一致しない場合は次のメソッドが試される。&lt;/p&gt;

&lt;p&gt;例えば、文字列のリストを反復処理しそれらを出力する方法は次のとおりだ：&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Printer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# これは少なくとも一つの要素が存在するリストにマッチするパターンだ&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 最初の要素が head に割り当てられ、残りは tail に割り当てられる&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 再帰的に tail と引数として print が呼び出される&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# リストが空になったとき上のメソッドではマッチぜず、かわりにこれがマッチする&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 何もしない。すべての出力は完了している。&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Printer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;baz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;また別のクールな例はリストが別のリストの接頭辞であるかどうかを確認する再帰的なメソッドだ：&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Prefix&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 両方のリストを反復する。もし最初の要素が等しかったら自分自身を再び呼び出す。&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# もし最初の要素(i)が等しくなかったら、このメソッドにはマッチしない。&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# もし接頭辞が空だったらこのメソッドにマッチし true を返す。&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# それ意外なら、false を返す。&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後に、パターンマッチングは Ruby 2.0 で計画されている機能の一つであるキーワード引数を可能にする。
この例は Elixir のコードそのものだ&lt;del&gt;（Elixir のシンボルはコロンではなくシングルクォートでることに注意）&lt;/del&gt;：&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ここに実装を書く ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Elixir と Erlang のどちらも &lt;strong&gt;while&lt;/strong&gt; のような条件ループを提供しないという事実は、あなたに異なる考え方やパターンマッチングの利用を強いることになる。&lt;/p&gt;

&lt;p&gt;まずは Ruby で解決して、次に全く別の解決策を考え出すというように、問題について別視点で考えるということは一般的に非常に洞察的で楽しい過程だ。&lt;/p&gt;

&lt;p&gt;また、注意として Elixir と Erlang の両方において末尾再帰最適化するので、もし Ruby で似たようなメソッドを実装するなら、巨大なスタックトレースを取得することができる場合のみ上手く動作する。&lt;/p&gt;

&lt;h3 id=&quot;単一代入変数と不変性-single-assignment-variables-and-immutability&quot;&gt;単一代入変数と不変性 (Single assignment variables and immutability)&lt;/h3&gt;

&lt;p&gt;上記例において Erlang の変数は単一代入であることをまだ見せてなかった。
これにより次のエラーが発生する：&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これは bad match error を投げる。
なぜなら既に &lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; に値が割り当てられており、2行目の &lt;code class=&quot;highlighter-rouge&quot;&gt;first = 10&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt; を比較しているので当然ここで失敗するのだ。&lt;/p&gt;

&lt;p&gt;変数は一度だけ割り当てられるということは、前述の prefix method のような実装が可能となり、両方のリストでマッチして &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; に値が割り当てられる。&lt;/p&gt;

&lt;p&gt;また、Elixir と Erlang の両方において、オブジェクト/データ構造はその場で変更することはできない。
こらは不変だ。
すべての変更は新しいオブジェクト/データ構造体を生成する。&lt;/p&gt;

&lt;p&gt;不変性は言語内部の共有状態を排除し（外部操作を実行する必要がある場合あなたはまだ状態を共有している）、Erlang と Elixir の並行性に重要な役割を果たしている。&lt;/p&gt;

&lt;p&gt;個人的に、不変性は同時に幸福と不幸もたらすことが分かった。
Railsアプリケーションで作業するとき可変性は一般的に問題ではないが、Rails 自体や gem 等の実装においては頻繁に可変性について考える必要がある。変更するメソッドにオブジェクト（ハッシュや配列のような）を渡したときに、そのオブジェクトの中の新しい要素が結局どうなったのかを追跡するために時間を費やさなければならない。&lt;/p&gt;

&lt;p&gt;Elixir で作業する際にすべてが不変であるので、このような場合を心配する必要はない、そう、それが気持ちいいのだ！
これは C から Java に行くような感覚で、私は突然メモリ管理を心配する必要もない。&lt;/p&gt;

&lt;p&gt;しかし、このような利点はいくつかのコードをより冗長にさせるという明らかな欠点をもたらす。&lt;/p&gt;

&lt;p&gt;この欠点を示すために、Rails ライクな PostsController の create アクションを、不変性と単一代入変数の両方を考慮して書き直してみる：&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:published&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;persisted?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合 ORM はよりよい API を提供することができそうだが、これは何度も繰り返されるパターンだ。
たとえば、クッキーを変更するとレスポンスオブジェクトに明示的な変更が必要になる。&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;response1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tracker_code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;123456&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;いずれにせよ、不変性と単一代入変数を提供する言語での作業は経験する価値がある。
私が今までのブログ記事で言及したことを試してみることによって多くを学ぶことができるだろう。&lt;/p&gt;

&lt;p&gt;追記：
いくつかのコメントで指摘したように、Elixir は単一代入を削除することができて、その上で Erlang の基盤と正常にやりとりすることができる。
このような理由から、Elixir は今では複数回同じ変数に割り当てることができるし、Erlang と比較すると変数のスコープ（Ruby に似ている）に関連したより柔軟なルールがある。&lt;/p&gt;

&lt;h3 id=&quot;プロセス間通信-communication-between-processes&quot;&gt;プロセス間通信 (Communication between processes)&lt;/h3&gt;

&lt;p&gt;パターンマッチング、単一代入変数と不変性は、プロセス間の通信のための良い基盤を提供する。
もしこれらの動作に興味があるなら&lt;a href=&quot;http://blog.plataformatec.com.br/2011/03/screencast-elixir-simple-object-orientation-and-charming-syntax-on-top-of-erlang/&quot;&gt;このスクリーンキャスト&lt;/a&gt;を見ると良い。&lt;/p&gt;

&lt;h3 id=&quot;異なるオブジェクトモデル-a-different-object-model&quot;&gt;異なるオブジェクトモデル (A different Object Model)&lt;/h3&gt;

&lt;p&gt;Elixir は Ruby とは異なるオブジェクトモデルを持っている。
オブジェクトモデルはクラスが無いという意味では JavaScript のようなプロトタイプベースだが、JavaScript や Self のそれとは違い
オブジェクトはその子供達がどのようになるかを指示することができ、必ずしも親から正確にコピーされない。&lt;/p&gt;

&lt;p&gt;これについてのより多くの情報は &lt;a href=&quot;http://github.com/elixir-lang/elixir&quot;&gt;Elixir の README&lt;/a&gt; にある。そこには、本当の private メソッド（多分それは Ruby 2.0 に含まれるかも？）やローカルメソッド呼び出しのようないくつかの他のクールな機能の情報も含まれる。&lt;/p&gt;

&lt;p&gt;常に他のオブジェクトモデルを使用することによって多くを学ぶことができ、このチップは Elixir だけに制限されるものではない。
あなたがもし JavaScript のオブジェクトモデルまたは他のプロトタイプベースの言語に精通していないのであれば、今それを学ぶことを勧める。&lt;/p&gt;

&lt;h3 id=&quot;学ぶ-just-learn&quot;&gt;学ぶ (Just learn)&lt;/h3&gt;

&lt;p&gt;スクリーンキャストやREADMEで述べたように、標準ライブラリとテストの両方が Elixir 自体で書かれているので Elixir に貢献するのはとても簡単だ。
さて、Elixir で &lt;a href=&quot;http://ruby-doc.org/stdlib/libdoc/set/rdoc/index.html&quot;&gt;Ruby のセット&lt;/a&gt;のような何かを実装しなければならないことを想像してみよう。&lt;/p&gt;

&lt;p&gt;Ruby のセットについてさらに深く学ぶだけでなく、使用するための最良の構造はどうあるべきか、どのアルゴリズムがセットを更新するのに適しているか、それらのオブジェクトにアクセスするための優れた API はどうあるべきか、について学ぶ必要がある。&lt;/p&gt;

&lt;p&gt;また、パッケージングシステム、ドキュメントパーサーやテスト·ライブラリのようにどの言語でも必要な基本的なツールだけど現在 Elixir で欠如しているこれらはあなたが実装する1つかもしれない！&lt;/p&gt;

&lt;h3 id=&quot;結論-wrapping-up&quot;&gt;結論 (Wrapping up)&lt;/h3&gt;

&lt;p&gt;私はあなたが Elixir を試してみること期待するし確信している。この言語に関してもっと知りたければ &lt;a href=&quot;http://github.com/elixir-lang/elixir&quot;&gt;README&lt;/a&gt; をチェックして欲しい。&lt;/p&gt;

&lt;p&gt;最後に、クレイジーなことをするために別のインスピレーションが必要なのであれば &lt;a href=&quot;http://pragdave.blogs.pragprog.com/pragdave/2008/12/forking-rubymy-rubyconf-keynote-is-now-up.html&quot;&gt;Forking Ruby talk by Dave Thomas&lt;/a&gt; を勧める。&lt;/p&gt;

&lt;p&gt;彼が言ったように、私たちは Ruby を愛し、そこからいますぐ離れるようなことは無いが、それを分岐したり新しい物事をしようとすることは言語とそのエコシステムを改善するための素晴らしい方法であり、Elixir がそのことについてさらに考える手助けになることを期待している。&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Mar 2012 00:33:00 +0900</pubDate>
        <link>http://localhost:4000//blog/2012/03/12/why-rubyists-should-try-elixir/</link>
        <guid isPermaLink="true">http://localhost:4000//blog/2012/03/12/why-rubyists-should-try-elixir/</guid>
        
        
        <category>elixir</category>
        
        <category>ruby</category>
        
        <category>translate</category>
        
      </item>
    
      <item>
        <title>PHPより気軽に、Rubyで簡単ウェブ開発</title>
        <description>&lt;p&gt;元旦に &lt;a href=&quot;http://github.com/migrs/rack-server-pages&quot;&gt;rack-server-pages&lt;/a&gt; というものを&lt;a href=&quot;http://rubygems.org/gems/rack-server-pages&quot;&gt;リリース&lt;/a&gt;しました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot;&gt;&lt;p&gt;元旦リリースしました。僕からのお年玉です。 &amp;gt; rack-server-pages &lt;a href=&quot;http://t.co/MODtXuOL&quot; title=&quot;http://j.mp/uNthnL&quot;&gt;j.mp/uNthnL&lt;/a&gt; &lt;a href=&quot;https://twitter.com/search/%2523ruby&quot;&gt;#ruby&lt;/a&gt;&lt;/p&gt;&amp;mdash; Masato Igarashi (@migrs) &lt;a href=&quot;https://twitter.com/migrs/status/153393608664424448&quot; data-datetime=&quot;2012-01-01T08:34:20+00:00&quot;&gt;January 1, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;実は数年前からずっと作りたいと思っていたもので個人ToDoリストに長らく居座っていたものがやっと着手できた。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Ruby で WEB開発といえば &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt; というデファクトスタンダードを筆頭に
MVCフレームワークを利用するのが一般的ですが、現状フレームワークを利用しないという選択肢がほとんど無いんですよね。&lt;/p&gt;

&lt;p&gt;フレームワークというキーワードを聞くだけで「よく分からない」「プログラマの為のもの」
感覚になってしまう人も多いはずです。
たとえシンプルで軽量といわれている &lt;a href=&quot;http://sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; ですら。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://php.net/&quot;&gt;PHP&lt;/a&gt; が初心者やデザイナーも含め広く受け入れられたのは
HTMLファイルの延長のような感覚で扱えたからというのも一つの大きな要因でしょう。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot;&gt;&lt;p&gt;PHPは言語仕様以外の部分は別に悪いと思ってないし、Better PHP として mod_ruby + erb のような構成はあっても良いはずと昔から思っている&lt;/p&gt;&amp;mdash; Masato Igarashi (@migrs) &lt;a href=&quot;https://twitter.com/migrs/status/99322027403526145&quot; data-datetime=&quot;2011-08-05T03:33:11+00:00&quot;&gt;August 5, 2011&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;同じように思っている人もいるようで、&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ruby-forum.com/topic/82003&quot;&gt;super simple serving of ruby pages&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;I’m starting to teach my 8yr daughter Ruby. We’ve covered HTML and CSS
already and she handcoded her own static website. I’d like to
incorporate her Ruby learning experience into her website, which is
much more interesting for her than using Ruby to write scripts or
desktop apps. She’s just starting out, so Rails is much too complicated
for her. She’s not ready for the whole MVC concept yet. What I’d like
to do is to run very simple Ruby scripts from the site and incorporate
Ruby code into rhtml files, but without Rails. I don’t really want a
“framework”, just the ability to run a ruby file that will serve up an
rhtml file. In other words, something very simple like PHP (I don’t
want to teach her PHP). [I’ll get into Rails later once she’s more
advanced.]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codingforums.com/showthread.php?t=230780&quot;&gt;how do you create a simple web page with ruby?&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;I know how to set up html web sites. I started learning php, and it’s really easy to create a php web page. You just name the file extension .php, and then you intersperse any php code you want in the html with &lt;?php .... ?&gt;. You throw the page up on the web, and it works exactly like you think it would.&lt;/p&gt;

  &lt;p&gt;But I have &lt;em&gt;no idea&lt;/em&gt; how to set up a simple “hello world” web page in ruby.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;このような需要を満たす為に作りました。&lt;/p&gt;

&lt;p&gt;もちろん効率的なWEB開発にはフレームワークは必要不可欠なのですが必要の無いケースも多々あるし、
何より気軽に体験できる環境を提供したかったのです。&lt;/p&gt;

&lt;p&gt;幸運なことに &lt;a href=&quot;http://github.com/rack/rack&quot;&gt;Rack&lt;/a&gt; や &lt;a href=&quot;http://github.com/github.com/rtomayko/tilt&quot;&gt;Tilt&lt;/a&gt; という強力で素晴らしい資産のおかげで
気軽さだけではなく実用性も兼ね備えることが出来ました。&lt;/p&gt;

&lt;p&gt;特に &lt;a href=&quot;http://pow.cx&quot;&gt;Pow&lt;/a&gt;, &lt;a href=&quot;http://github.com/migrs/rack-server-pages&quot;&gt;Rack Server Pages&lt;/a&gt; の組み合わせはWEBデザイナーな人にも是非体験して欲しい環境で、
&lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt;, &lt;a href=&quot;http://slim-lang.com/&quot;&gt;Slim&lt;/a&gt;, &lt;a href=&quot;http://jashkenas.github.com/coffee-script/&quot;&gt;CoffeeScript&lt;/a&gt; 等、ほぼプログラマ向けになってしまっている技術が気軽に活用でき少し幸せになれるはず。&lt;/p&gt;

&lt;p&gt;ここでは紹介まで。&lt;/p&gt;

&lt;p&gt;日本語のドキュメントが全くないので（実際 &lt;a href=&quot;https://github.com/migrs/rack-server-pages/watchers&quot;&gt;Watchers&lt;/a&gt; も外国の方ばかり）少しずつ書いていければと。（誰か私に文章力と英語力を！）&lt;/p&gt;

&lt;p&gt;まだまだ発展途上ですが、問題・不具合あれば&lt;a href=&quot;https://github.com/inbox/new/migrs&quot;&gt;連絡&lt;/a&gt;・&lt;a href=&quot;https://github.com/migrs/rack-server-pages/issues&quot;&gt;フィードバック&lt;/a&gt;お願いします。&lt;/p&gt;

</description>
        <pubDate>Fri, 06 Jan 2012 07:09:00 +0900</pubDate>
        <link>http://localhost:4000//blog/2012/01/06/rack-server-pages-released/</link>
        <guid isPermaLink="true">http://localhost:4000//blog/2012/01/06/rack-server-pages-released/</guid>
        
        
        <category>rack-server-pages</category>
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>全ての gem をアンインストール</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--all-installed&lt;/code&gt; 的なオプションがありそうでないのでメモ&lt;br /&gt;
(&lt;code class=&quot;highlighter-rouge&quot;&gt;--all&lt;/code&gt; はあるけど特定の gem のすべてのバージョンを削除の意味)&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem uninstall &lt;span class=&quot;nt&quot;&gt;-axI&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;gem list &lt;span class=&quot;nt&quot;&gt;--no-versions&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://rubygems.org/&quot;&gt;rubygems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 21 Dec 2011 11:17:00 +0900</pubDate>
        <link>http://localhost:4000//blog/2011/12/21/gem-uninstall-all/</link>
        <guid isPermaLink="true">http://localhost:4000//blog/2011/12/21/gem-uninstall-all/</guid>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>iPhone4 のホームボタンを自分で交換するときに気をつけること</title>
        <description>&lt;p&gt;さんざんデコピンとかしたけど全く効果なかったので交換したのが約１ヶ月半前。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot;&gt;&lt;p&gt;部品いっぱい余ったり蓋閉まらなくなったりしたけど、ホームボタン治ったよ！！！！ &lt;a href=&quot;http://t.co/kNNaIdY7&quot; title=&quot;http://flic.kr/p/aBbf1F&quot;&gt;flic.kr/p/aBbf1F&lt;/a&gt;&lt;/p&gt;&amp;mdash; Masato Igarashi (@migrs) &lt;a href=&quot;https://twitter.com/migrs/status/131699224881545216&quot; data-datetime=&quot;2011-11-02T11:48:36+00:00&quot;&gt;November2, 2011&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;img class=&quot;right&quot; src=&quot;http://farm7.staticflickr.com/6212/6305286527_552e602eb7_m.jpg&quot; width=&quot;240&quot; height=&quot;180&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Assistive Touch 使って頑張ってる人もいるようですが、交換してからというものとにかく普通に使えることが快適でホームボタンが不調でなかったら感じることができなかった快感を得ることができます。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;私はダメモト(ダメだったら4S買う理由にするつもり)で自分で修理したのですが&lt;strong&gt;ハッキリ言って修理業者頼んだ方がいい&lt;/strong&gt;です。
(多分修理費5000-6000円くらいかな？)
想像以上に詰まってる感じだった。修理過程において何度諦めようとしたことか。&lt;/p&gt;

&lt;p&gt;ここではそんなモノ好きな人の為に、修理する際に参考にした
&lt;a href=&quot;http://www.ifixit.com/Guide/Installing-iPhone-4-Home-Button/3144/&quot;&gt;Installing iPhone 4 Home Button&lt;/a&gt; をベースに、
気をつけた方が良いポイントについてメモしておきます。&lt;/p&gt;

&lt;h2 id=&quot;買ったもの&quot;&gt;買ったもの&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ires.jp/&quot;&gt;iRescue&lt;/a&gt; で購入した。(発注後なかなか届かなかったのでメールで催促したら慌てて発送してくれた。)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ires.jp/?pid=25567092&quot;&gt;iPhone 4 ホームボタン フレキシブルケーブル&lt;/a&gt; (税込み1155円)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://img17.shop-pro.jp/PA01103/007/product/25567092.jpeg&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ires.jp/?pid=25567244&quot;&gt;iPhone/iPod 分解工具セット(iPhone4対応)&lt;/a&gt; (税込み945円)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://img17.shop-pro.jp/PA01103/007/product/25567244.jpg&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;所要時間&quot;&gt;所要時間&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;分解１時間&lt;/li&gt;
  &lt;li&gt;放心１時間&lt;/li&gt;
  &lt;li&gt;組立１時間&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;合計３時間くらいみておいた方がいいです。&lt;/p&gt;

&lt;h2 id=&quot;修理&quot;&gt;修理&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ifixit.com/Guide/Installing-iPhone-4-Home-Button/3144/&quot;&gt;Installing iPhone 4 Home Button&lt;/a&gt; の手順で進めていきます。&lt;/p&gt;

&lt;h3 id=&quot;分解&quot;&gt;分解&lt;/h3&gt;
&lt;p&gt;とにかくその精密さとパーツの多さに驚きながら分解します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ifixit.com/Guide/Installing-iPhone-4-Home-Button/3144/2#s15368&quot;&gt;Step 6&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;結構剥しにくかった。しっかり糊付けされてます。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ifixit.com/Guide/Installing-iPhone-4-Home-Button/3144/3#s15378&quot;&gt;Step 7&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;SIM Card 取り出しツールは上記工具セットには含まれてないので注意。ペーパークリップでOK。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ifixit.com/Guide/Installing-iPhone-4-Home-Button/3144/6#s15383&quot;&gt;Step 16&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;小さな丸いシールは浸水チェッカーです。ここまできたら不要なので剥して捨てましょう。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ifixit.com/Guide/Installing-iPhone-4-Home-Button/3144/10#s15402&quot;&gt;Step 28&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;ここが個人的に分解時の最難関だった。とにかくフロントガラスが外れにくい。&lt;/li&gt;
      &lt;li&gt;工具セットにあった、&lt;strong&gt;吸盤&lt;/strong&gt;と&lt;strong&gt;ギターピック&lt;/strong&gt;が活躍します。&lt;/li&gt;
      &lt;li&gt;吸盤でガラスを持ち上げわずかに空いた隙間にギターピックを差し込みましょう。&lt;/li&gt;
      &lt;li&gt;あとはギターピックをうまくずらしながら隙間を広げつつ吸盤使って慎重に外します。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ifixit.com/Guide/Installing-iPhone-4-Home-Button/3144/11#s15407&quot;&gt;Step 33&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;おつかれさまでした。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;放心&quot;&gt;放心&lt;/h3&gt;
&lt;p&gt;分解されたパーツ群を眺め暫くぼーっとします。&lt;/p&gt;

&lt;h3 id=&quot;組立&quot;&gt;組立&lt;/h3&gt;
&lt;p&gt;分解の逆順を辿るだけなのですがここからが大変。ifixit では逆順の説明がなく何度も途方に来れた。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ifixit.com/Guide/Installing-iPhone-4-Home-Button/3144/10#s15404&quot;&gt;Step 30&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;フロントガラスを閉める際、間を通すケーブルがありますがケーブル自体を挟み込まないようしっかり通しましょう。&lt;/li&gt;
      &lt;li&gt;ここでしっかり通しておかないと &lt;a href=&quot;http://www.ifixit.com/Guide/Installing-iPhone-4-Home-Button/3144/6#s15385&quot;&gt;Step 18&lt;/a&gt; で端子が嵌らなくなります。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ifixit.com/Guide/Installing-iPhone-4-Home-Button/3144/7#s15388&quot;&gt;Step 21&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;この黒い部品(スピーカー)をはめる時に、非常に小さな爪が4つ程あるのですが、これが非常にもろい。&lt;/li&gt;
      &lt;li&gt;私は4本中3本折りました。。。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ifixit.com/Guide/Installing-iPhone-4-Home-Button/3144/5#s15381&quot;&gt;Step 14&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;ここから以降正確に嵌めないと最後にフタが閉まらなくなるのでぴったり組み立ててください。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ということで&quot;&gt;ということで&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/migrsy/6305286527/&quot;&gt;この写真&lt;/a&gt;にもあるようにネジやパーツは数点あまりましたが一応何も問題無く動いています。
組み立て終わって電源入ったりタッチできたり通話できたり写真とれたり正常に機能したときの感動は忘れられません。&lt;/p&gt;

&lt;p&gt;この記事は主に友人S君に捧げるようともっと前に書きたかった内容だったのだが遅くなってしまった。
彼は無事交換できたのであろうか。&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Dec 2011 02:35:00 +0900</pubDate>
        <link>http://localhost:4000//blog/2011/12/18/fix-iphone4-home-button/</link>
        <guid isPermaLink="true">http://localhost:4000//blog/2011/12/18/fix-iphone4-home-button/</guid>
        
        
        <category>iphone</category>
        
      </item>
    
      <item>
        <title>switching to octopress</title>
        <description>&lt;p&gt;しばらくの間 &lt;a href=&quot;http://gyazo.com/085cca9f560924d7357df4cf75743164&quot;&gt;github パクリデザイン&lt;/a&gt;でしたが
&lt;a href=&quot;http://gyazo.com/5a49da61cbd3f87582562f5739f9b9f4&quot;&gt;レイアウト崩れて&lt;/a&gt;きてしまった(リソース直接参照してました。すいません…)
ので変更することにしました。&lt;/p&gt;

&lt;p&gt;ということで今回採用したのが &lt;a href=&quot;http://octopress.org&quot;&gt;octopress&lt;/a&gt; というブログエンジンです。&lt;/p&gt;

&lt;h2 id=&quot;octopress-とは&quot;&gt;octopress とは&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://gyazo.com/b4b39d29e0f26e05cf211deab638554f.png&quot; width=&quot;629&quot; height=&quot;196&quot; alt=&quot;octopress&quot; /&gt;
&lt;a href=&quot;http://octopress.org/&quot;&gt;http://octopress.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;簡単に言えば &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt; にデザイン載せて便利にしたようなブログエンジンです。&lt;br /&gt;
jekyll 自体に手を加えているわけではなく、jekyll を利用したフレームワークといった感じ。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;特徴&quot;&gt;特徴&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;HTML5 / CSS3 でデザインもイケてるデフォルトテンプレート&lt;/li&gt;
  &lt;li&gt;スマートフォン対応 (&lt;a href=&quot;http://stuffandnonsense.co.uk/projects/320andup/&quot;&gt;320 and up&lt;/a&gt; 採用)&lt;/li&gt;
  &lt;li&gt;外部サイト連携 (&lt;a href=&quot;http://twitter.com/&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;http://plus.google.com/&quot;&gt;Google Plus&lt;/a&gt;, &lt;a href=&quot;http://disqus.com/&quot;&gt;Disqus&lt;/a&gt;, &lt;a href=&quot;http://pinboard.in/&quot;&gt;Pinboard&lt;/a&gt;, &lt;a href=&quot;http://delicious.com/&quot;&gt;Delicious&lt;/a&gt;, &lt;a href=&quot;http://www.google.com/analytics/&quot;&gt;Google Analytics&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/pages.github.com/&quot;&gt;Github pages&lt;/a&gt; や任意のサーバへの簡単なデプロイの提供&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pow.cx/&quot;&gt;Pow&lt;/a&gt; / &lt;a href=&quot;http://rack.rubyforge.org/&quot;&gt;Rack&lt;/a&gt; 対応&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass&lt;/a&gt; / &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; を利用したテーマ&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ethanschoonover.com/solarized&quot;&gt;Solarized&lt;/a&gt; によるキレイなシンタックスハイライト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;jekyll の思想や仕組みは好きだが、実際それなりのデザインにするのは難しいと感じていた私のような(なのでパクった)人に octopress は良いと思う。&lt;br /&gt;
実際、移行もサクっとできた。&lt;/p&gt;

&lt;p&gt;WordPress / Movable Type 等他ブログからの移行については jekyll 自体が対応している。See, &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/blog-migrations&quot;&gt;Blog Migrations&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;get-start&quot;&gt;Get Start&lt;/h2&gt;
&lt;p&gt;セットアップに関しては &lt;a href=&quot;http://octopress.org/docs/setup/&quot;&gt;Octopress Setup&lt;/a&gt; にあるとおりでハマリ所もないので省略。
&lt;strong&gt;Ruby 1.9.2 必須&lt;/strong&gt; なのでそこだけ注意。
ちなみに私は &lt;a href=&quot;https://github.com/sstephenson/rbenv&quot;&gt;rbenv&lt;/a&gt; を利用してます。&lt;/p&gt;

&lt;h3 id=&quot;ローカルプレビュー&quot;&gt;ローカルプレビュー&lt;/h3&gt;
&lt;p&gt;上記セットアップさえすればすぐデザインを確認できます。&lt;/p&gt;

&lt;p&gt;ローカル環境で表示を確認したい場合は、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake preview
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;でサーバが立ち上がるので &lt;a href=&quot;http://localhost:4000/&quot;&gt;http://localhost:4000/&lt;/a&gt; で確認できます。
jekyllの場合の &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll --server&lt;/code&gt; と同じですね。&lt;/p&gt;

&lt;p&gt;octopress は &lt;a href=&quot;http://pow.cx/&quot;&gt;Pow&lt;/a&gt; (というか &lt;a href=&quot;http://rack.rubyforge.org/&quot;&gt;Rack&lt;/a&gt;)にも対応しているのでマカーで Pow 使ってる人は &lt;code class=&quot;highlighter-rouge&quot;&gt;rake preview&lt;/code&gt; しなくても &lt;code class=&quot;highlighter-rouge&quot;&gt;http://[SITENAME].dev&lt;/code&gt; で確認できます。&lt;/p&gt;

&lt;p&gt;ファイルの変更を自動で反映させるには、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;します。 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll --auto&lt;/code&gt; オプションと同じです。&lt;/p&gt;

&lt;h3 id=&quot;基本的な設定&quot;&gt;基本的な設定&lt;/h3&gt;
&lt;p&gt;jekyll の設定ファイルである &lt;a href=&quot;https://github.com/imathis/octopress/blob/master/_config.yml&quot;&gt;_config.yml&lt;/a&gt; を編集します。&lt;br /&gt;
特にこだわら無いのであれば、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/imathis/octopress/blob/master/_config.yml#L2&quot;&gt;Main Configs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/imathis/octopress/blob/master/_config.yml#L57&quot;&gt;3rd Party Settings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりをちょろっと変更するくらいで大丈夫です。&lt;br /&gt;
設定の変更は &lt;code class=&quot;highlighter-rouge&quot;&gt;rake watch&lt;/code&gt; では反映されないようなので必要に応じて再実行しましょう。&lt;/p&gt;

&lt;h3 id=&quot;記事の投稿&quot;&gt;記事の投稿&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake new_post[&quot;switching to octopress&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;すると&lt;code class=&quot;highlighter-rouge&quot;&gt;source/_posts/2011-12-17-switching-to-octopress.markdown&lt;/code&gt; が生成されるのでこれを編集します。
デフォルトは markdown ですが &lt;a href=&quot;https://github.com/imathis/octopress/blob/master/Rakefile&quot;&gt;Rakefile&lt;/a&gt; で設定変更できます。&lt;/p&gt;

&lt;p&gt;ちなみにこの記事のソースは&lt;a href=&quot;https://github.com/migrs/m.igrs.jp/blob/master/source/_posts/2011-12-17-switching-to-octopress.markdown&quot;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;デプロイ&quot;&gt;デプロイ&lt;/h3&gt;
&lt;p&gt;自分のサーバ等にデプロイする場合は &lt;a href=&quot;https://github.com/imathis/octopress/blob/master/Rakefile&quot;&gt;Rakefile&lt;/a&gt; の &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_user&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;document_root&lt;/code&gt; あたりを変更します。&lt;/p&gt;

&lt;p&gt;Github pages を利用する場合は、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake setup_github_pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;することで &lt;code class=&quot;highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; の設定部分が書き変わるので直接変更する必要はありません。&lt;/p&gt;

&lt;p&gt;そして、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;することで本番環境にページが反映されます。&lt;/p&gt;

&lt;strike&gt;ただ Github pages デプロイ機能は毎回リポジトリ削除してから新規作成するようなのでコミット履歴が残らないのがちょっと残念。&lt;/strike&gt;
&lt;p&gt;そんなことなかった。&lt;/p&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;
&lt;p&gt;デフォルトでここまでデザインできているのはうれしいね！&lt;br /&gt;
他にもいろいろ紹介したい機能等あるけど今回はとりあえずここまで。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;h3 id=&quot;rake-タスク一覧&quot;&gt;rake タスク一覧&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake clean                 # Clean out caches: .pygments-cache, .gist-cache, .sass-cache
rake copydot[source,dest]  # copy dot files for deployment
rake deploy                # Default deploy task
rake gen_deploy            # Generate website and deploy
rake generate              # Generate jekyll site
rake install[theme]        # Initial setup for Octopress: copies the default theme into the path of Jekyll's ge...
rake integrate             # Move all stashed posts back into the posts directory, ready for site generation.
rake isolate[filename]     # Move all other posts than the one currently being worked on to a temporary stash l...
rake list                  # list tasks
rake new_page[filename]    # Create a new page in source/(filename)/index.markdown
rake new_post[title]       # Begin a new post in source/_posts
rake preview               # preview the site in a web browser
rake push                  # deploy public directory to github pages
rake rsync                 # Deploy website via rsync
rake set_root_dir[dir]     # Update configurations to support publishing to root or sub directory
rake setup_github_pages    # Set up _deploy folder and deploy branch for Github Pages deployment
rake update_source[theme]  # Move source to source.old, install source theme updates, replace source/_includes/...
rake update_style[theme]   # Move sass to sass.old, install sass theme updates, replace sass/custom with sass.o...
rake watch                 # Watch the site and regenerate when it changes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sat, 17 Dec 2011 00:46:00 +0900</pubDate>
        <link>http://localhost:4000//blog/2011/12/17/switching-to-octopress/</link>
        <guid isPermaLink="true">http://localhost:4000//blog/2011/12/17/switching-to-octopress/</guid>
        
        
        <category>octopress</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>DRBDボリュームのオンラインリサイズ</title>
        <description>&lt;p&gt;Dual Primary で構成している状態だとオンラインリサイズ出来ないようなので(出来るようであれば教えてください！)、片方 Secondary に降格させてからリサイズすることになる。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;リサイズ手順&quot;&gt;リサイズ手順&lt;/h2&gt;

&lt;p&gt;両方のサーバ(sv1,sv2)で LVMパーティションの拡張をする&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sv1$ sudo lvextend -L +1G /dev/sys/drbd0
sv2$ sudo lvextend -L +1G /dev/sys/drbd0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;片方を Secondary に降格&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sv2$ umount /mnt/drbd0
sv2$ sudo drbdadm secondary r0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;drbdadm resize コマンドの実行。Primary のみで実行。(see &lt;a href=&quot;http://bit.ly/kj3Yk5&quot;&gt;リソースのサイズ変更&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sv1$ sudo drbdadm resize r0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ファイルシステムの拡張(ocfs2の場合)。Primary のみで実行。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sv1$ sudo tunefs.ocfs2 -S /dev/drbd0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでリサイズ完了。&lt;/p&gt;

&lt;p&gt;最後に一時降格した Secondary を Primary に昇格しマウントして終了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sv2$ sudo drbdadm primary r0
sv2$ mount /dev/drbd0 /mnt/drbd0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;サイズ確認方法&quot;&gt;サイズ確認方法&lt;/h2&gt;
&lt;p&gt;上記手順中にて実際拡張されているか確認する方法&lt;/p&gt;

&lt;p&gt;ブロックデバイスのサイズ確認
    sudo blockdev –getsz /dev/sys/drbd0&lt;/p&gt;

&lt;p&gt;マウントされているファイルシステムのサイズ確認
    df -h&lt;/p&gt;

&lt;h2 id=&quot;参考url&quot;&gt;参考URL&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/kj3Yk5&quot;&gt;リソースのサイズ変更&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/jMWKe1&quot;&gt;DRBD リソース・サイズを拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 31 May 2011 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//blog/2011/05/31/drbd-volume-online-resize/</link>
        <guid isPermaLink="true">http://localhost:4000//blog/2011/05/31/drbd-volume-online-resize/</guid>
        
        
        <category>drbd</category>
        
        <category>ocfs2</category>
        
        <category>lvm</category>
        
      </item>
    
  </channel>
</rss>
